\Illuminate\Support\Facades\App

* @method static never abort(int $code, string $message = '', array $headers = [])
* @method static \Illuminate\Foundation\Application addAbsoluteCachePathPrefix(string $prefix)
* @method static void addContextualBinding(string $concrete, string $abstract, \Closure|string $implementation)
* @method static void addDeferredServices(array $services)
* @method static void afterBootstrapping(string $bootstrapper, \Closure $callback)
* @method static void afterLoadingEnvironment(\Closure $callback)
* @method static void afterResolving(\Closure|string $abstract, \Closure|null $callback = null)
* @method static void alias(string $abstract, string $alias)
* @method static string basePath(string $path = '')
* @method static void beforeBootstrapping(string $bootstrapper, \Closure $callback)
* @method static void beforeResolving(\Closure|string $abstract, \Closure|null $callback = null)
* @method static void bind(string $abstract, \Closure|string|null $concrete = null, bool $shared = false)
* @method static void bindIf(string $abstract, \Closure|string|null $concrete = null, bool $shared = false)
* @method static void bindMethod(array|string $method, \Closure $callback)
* @method static void boot()
* @method static void booted(callable $callback)
* @method static void booting(callable $callback)
* @method static string bootstrapPath(string $path = '')
* @method static void bootstrapWith(array $bootstrappers)
* @method static bool bound(string $abstract)
* @method static mixed build(\Closure|string $concrete)
* @method static mixed call(callable|string $callback, array $parameters = [], string|null $defaultMethod = null)
* @method static mixed callMethodBinding(string $method, mixed $instance)
* @method static string configPath(string $path = '')
* @method static bool configurationIsCached()
* @method static string currentLocale()
* @method static string databasePath(string $path = '')
* @method static string detectEnvironment(\Closure $callback)
* @method static string|bool environment(string|array $environments)
* @method static string environmentFile()
* @method static string environmentFilePath()
* @method static string environmentPath()
* @method static bool eventsAreCached()
* @method static void extend(string $abstract, \Closure $closure)
* @method static \Closure factory(string $abstract)
* @method static void flush()
* @method static void forgetExtenders(string $abstract)
* @method static void forgetInstance(string $abstract)
* @method static void forgetInstances()
* @method static void forgetScopedInstances()
* @method static mixed Entry. get(string $id Identifier of the entry to look for.)
* @method static string getAlias(string $abstract)
* @method static array getBindings()
* @method static string getCachedConfigPath()
* @method static string getCachedEventsPath()
* @method static string getCachedPackagesPath()
* @method static string getCachedRoutesPath()
* @method static string getCachedServicesPath()
* @method static array getDeferredServices()
* @method static string getFallbackLocale()
* @method static static getInstance()
* @method static array getLoadedProviders()
* @method static string getLocale()
* @method static string getNamespace()
* @method static \Illuminate\Support\ServiceProvider|null getProvider(\Illuminate\Support\ServiceProvider|string $provider)
* @method static array getProviders(\Illuminate\Support\ServiceProvider|string $provider)
* @method static \Symfony\Component\HttpFoundation\Response handle()
* @method static bool has(string $id Identifier of the entry to look for.)
* @method static bool hasBeenBootstrapped()
* @method static bool hasDebugModeEnabled()
* @method static bool hasMethodBinding(string $method)
* @method static mixed instance(string $abstract, mixed $instance)
* @method static bool isAlias(string $name)
* @method static bool isBooted()
* @method static bool isDeferredService(string $service)
* @method static bool isDownForMaintenance()
* @method static bool isLocal()
* @method static bool isLocale(string $locale)
* @method static bool isProduction()
* @method static bool isShared(string $abstract)
* @method static string langPath(string $path = '')
* @method static void loadDeferredProvider(string $service)
* @method static void loadDeferredProviders()
* @method static \Illuminate\Foundation\Application loadEnvironmentFrom(string $file)
* @method static \Illuminate\Contracts\Foundation\MaintenanceMode maintenanceMode()
* @method static mixed make(string $abstract, array $parameters = [])
* @method static mixed makeWith(string|callable $abstract, array $parameters = [])
* @method static bool offsetExists(string $key)
* @method static mixed offsetGet(string $key)
* @method static void offsetSet(string $key, mixed $value)
* @method static void offsetUnset(string $key)
* @method static string path(string $path = '')
* @method static void provideFacades(string $namespace)
* @method static bool providerIsLoaded(string $provider)
* @method static string publicPath()
* @method static mixed rebinding(string $abstract, \Closure $callback)
* @method static mixed refresh(string $abstract, mixed $target, string $method)
* @method static \Illuminate\Support\ServiceProvider register(\Illuminate\Support\ServiceProvider|string $provider, bool $force = false)
* @method static void registerConfiguredProviders()
* @method static void registerCoreContainerAliases()
* @method static void registerDeferredProvider(string $provider, string|null $service = null)
* @method static \Illuminate\Support\ServiceProvider resolveProvider(string $provider)
* @method static bool resolved(string $abstract)
* @method static void resolving(\Closure|string $abstract, \Closure|null $callback = null)
* @method static string resourcePath(string $path = '')
* @method static bool routesAreCached()
* @method static bool runningInConsole()
* @method static bool runningUnitTests()
* @method static void scoped(string $abstract, \Closure|string|null $concrete = null)
* @method static void scopedIf(string $abstract, \Closure|string|null $concrete = null)
* @method static \Illuminate\Foundation\Application setBasePath(string $basePath)
* @method static void setDeferredServices(array $services)
* @method static void setFallbackLocale(string $fallbackLocale)
* @method static \Illuminate\Contracts\Container\Container|static setInstance(\Illuminate\Contracts\Container\Container|null $container = null)
* @method static void setLocale(string $locale)
* @method static bool shouldSkipMiddleware()
* @method static void singleton(string $abstract, \Closure|string|null $concrete = null)
* @method static void singletonIf(string $abstract, \Closure|string|null $concrete = null)
* @method static string storagePath(string $path = '')
* @method static void tag(array|string $abstracts, array|mixed ...$tags)
* @method static iterable tagged(string $tag)
* @method static void terminate()
* @method static \Illuminate\Contracts\Foundation\Application terminating(callable|string $callback)
* @method static \Illuminate\Foundation\Application useAppPath(string $path)
* @method static \Illuminate\Foundation\Application useDatabasePath(string $path)
* @method static \Illuminate\Foundation\Application useEnvironmentPath(string $path)
* @method static \Illuminate\Foundation\Application useLangPath(string $path)
* @method static \Illuminate\Foundation\Application useStoragePath(string $path)
* @method static string version()
* @method static string viewPath(string $path = '')
* @method static \Illuminate\Contracts\Container\ContextualBindingBuilder when(string|array $concrete)
* @method static \Closure wrap(\Closure $callback, array $parameters = [])

\Illuminate\Support\Facades\Artisan

* @method static array all()
* @method static void bootstrap()
* @method static int call(string $command, array $parameters = [], \Symfony\Component\Console\Output\OutputInterface|null $outputBuffer = null)
* @method static \Illuminate\Foundation\Console\ClosureCommand command(string $signature, \Closure $callback)
* @method static int handle(\Symfony\Component\Console\Input\InputInterface $input, \Symfony\Component\Console\Output\OutputInterface|null $output = null)
* @method static string output()
* @method static \Illuminate\Foundation\Bus\PendingDispatch queue(string $command, array $parameters = [])
* @method static void registerCommand(\Symfony\Component\Console\Command\Command $command)
* @method static void setArtisan(\Illuminate\Console\Application $artisan)
* @method static void terminate(\Symfony\Component\Console\Input\InputInterface $input, int $status)

\Illuminate\Support\Facades\Auth

* @method static bool attempt(array $credentials = [], bool $remember = false)
* @method static bool check()
* @method static \Illuminate\Auth\SessionGuard createSessionDriver(string $name, array $config)
* @method static \Illuminate\Auth\TokenGuard createTokenDriver(string $name, array $config)
* @method static \Illuminate\Contracts\Auth\UserProvider|null createUserProvider(string|null $provider = null)
* @method static \Illuminate\Auth\AuthManager extend(string $driver, \Closure $callback)
* @method static \Illuminate\Auth\AuthManager forgetGuards()
* @method static string getDefaultDriver()
* @method static string getDefaultUserProvider()
* @method static \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard guard(string|null $name = null)
* @method static bool guest()
* @method static bool hasResolvedGuards()
* @method static bool hasUser()
* @method static int|string|null id()
* @method static void login(\Illuminate\Contracts\Auth\Authenticatable $user, bool $remember = false)
* @method static \Illuminate\Contracts\Auth\Authenticatable|bool loginUsingId(mixed $id, bool $remember = false)
* @method static void logout()
* @method static bool once(array $credentials = [])
* @method static \Illuminate\Contracts\Auth\Authenticatable|bool onceUsingId(mixed $id)
* @method static \Illuminate\Auth\AuthManager provider(string $name, \Closure $callback)
* @method static \Illuminate\Auth\AuthManager resolveUsersUsing(\Closure $userResolver)
* @method static \Illuminate\Auth\AuthManager setApplication(\Illuminate\Contracts\Foundation\Application $app)
* @method static void setDefaultDriver(string $name)
* @method static void setUser(\Illuminate\Contracts\Auth\Authenticatable $user)
* @method static void shouldUse(string $name)
* @method static \Illuminate\Contracts\Auth\Authenticatable|null user()
* @method static \Closure userResolver()
* @method static bool validate(array $credentials = [])
* @method static bool viaRemember()
* @method static \Illuminate\Auth\AuthManager viaRequest(string $driver, callable $callback)

\Illuminate\Support\Facades\Blade

* @method static void aliasComponent(string $path, string|null $alias = null)
* @method static void aliasInclude(string $path, string|null $alias = null)
* @method static void anonymousComponentNamespace(string $directory, string|null $prefix = null)
* @method static string applyEchoHandler(string $value)
* @method static bool check(string $name, array $parameters)
* @method static void compile(string|null $path = null)
* @method static string compileClassComponentOpening(string $component, string $alias, string $data, string $hash)
* @method static string compileEchos(string $value)
* @method static string compileEndComponentClass()
* @method static string compileEndOnce()
* @method static string compileString(string $value)
* @method static void component(string $class, string|null $alias = null, string $prefix = '')
* @method static void componentNamespace(string $namespace, string $prefix)
* @method static void components(array $components, string $prefix = '')
* @method static void directive(string $name, callable $handler)
* @method static void extend(callable $compiler)
* @method static array getAnonymousComponentNamespaces()
* @method static array getClassComponentAliases()
* @method static array getClassComponentNamespaces()
* @method static string getCompiledPath(string $path)
* @method static array getCustomDirectives()
* @method static array getExtensions()
* @method static string getPath()
* @method static void if(string $name, callable $callback)
* @method static void include(string $path, string|null $alias = null)
* @method static bool isExpired(string $path)
* @method static string newComponentHash(string $component)
* @method static void precompiler(callable $precompiler)
* @method static string render(string $string, array $data = [], bool $deleteCachedView = false)
* @method static string renderComponent(\Illuminate\View\Component $component)
* @method static mixed sanitizeComponentAttribute(mixed $value)
* @method static void setEchoFormat(string $format)
* @method static void setPath(string $path)
* @method static void stringable(string|callable $class, callable|null $handler = null)
* @method static string stripParentheses(string $expression)
* @method static void withDoubleEncoding()
* @method static void withoutComponentTags()
* @method static void withoutDoubleEncoding()

\Illuminate\Support\Facades\Broadcast

* @method static \Ably\AblyRest ably(array $config)
* @method static void channelRoutes(array|null $attributes = null)
* @method static \Illuminate\Contracts\Broadcasting\Broadcaster connection(string|null $name = null)
* @method static mixed driver(string|null $name = null)
* @method static \Illuminate\Broadcasting\PendingBroadcast event(mixed|null $event = null)
* @method static \Illuminate\Broadcasting\BroadcastManager extend(string $driver, \Closure $callback)
* @method static \Illuminate\Broadcasting\BroadcastManager forgetDrivers()
* @method static \Illuminate\Contracts\Foundation\Application getApplication()
* @method static string getDefaultDriver()
* @method static void purge(string|null $name = null)
* @method static \Pusher\Pusher pusher(array $config)
* @method static void queue(mixed $event)
* @method static void routes(array|null $attributes = null)
* @method static \Illuminate\Broadcasting\BroadcastManager setApplication(\Illuminate\Contracts\Foundation\Application $app)
* @method static void setDefaultDriver(string $name)
* @method static string|null socket(\Illuminate\Http\Request|null $request = null)
* @method static void userRoutes(array|null $attributes = null)

\Illuminate\Support\Facades\Bus

* @method static \Illuminate\Bus\PendingBatch batch(\Illuminate\Support\Collection|array|mixed $jobs)
* @method static \Illuminate\Foundation\Bus\PendingChain chain(\Illuminate\Support\Collection|array $jobs)
* @method static mixed dispatch(mixed $command)
* @method static void dispatchAfterResponse(mixed $command, mixed $handler = null)
* @method static mixed dispatchNow(mixed $command, mixed $handler = null)
* @method static mixed dispatchSync(mixed $command, mixed $handler = null)
* @method static mixed dispatchToQueue(mixed $command)
* @method static \Illuminate\Bus\Batch|null findBatch(string $batchId)
* @method static bool|mixed getCommandHandler(mixed $command)
* @method static bool hasCommandHandler(mixed $command)
* @method static \Illuminate\Contracts\Bus\Dispatcher map(array $map)
* @method static \Illuminate\Contracts\Bus\Dispatcher pipeThrough(array $pipes)

\Illuminate\Support\Facades\Cache

* @method static bool add(string $key, mixed $value, \DateTimeInterface|\DateInterval|int|null $ttl = null)
* @method static bool clear()
* @method static int|bool decrement(string $key, mixed $value = 1)
* @method static bool delete()
* @method static bool deleteMultiple()
* @method static \Illuminate\Contracts\Cache\Repository driver(string|null $driver = null)
* @method static \Illuminate\Cache\CacheManager extend(string $driver, \Closure $callback)
* @method static void flushMacros()
* @method static bool forever(string $key, mixed $value)
* @method static bool forget(string $key)
* @method static \Illuminate\Cache\CacheManager forgetDriver(array|string|null $name = null)
* @method static mixed get(array|string $key, mixed $default = null)
* @method static int|null getDefaultCacheTime()
* @method static string getDefaultDriver()
* @method static \Illuminate\Contracts\Events\Dispatcher getEventDispatcher()
* @method static iterable getMultiple()
* @method static \Illuminate\Contracts\Cache\Store getStore()
* @method static bool has(string $key)
* @method static bool hasMacro(string $name)
* @method static int|bool increment(string $key, mixed $value = 1)
* @method static void macro(string $name, object|callable $macro)
* @method static mixed macroCall(string $method, array $parameters)
* @method static array many(array $keys)
* @method static bool missing(string $key)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static bool offsetExists(string $key)
* @method static mixed offsetGet(string $key)
* @method static void offsetSet(string $key, mixed $value)
* @method static void offsetUnset(string $key)
* @method static mixed pull(string $key, mixed $default = null)
* @method static void purge(string|null $name = null)
* @method static bool put(array|string $key, mixed $value, \DateTimeInterface|\DateInterval|int|null $ttl = null)
* @method static bool putMany(array $values, \DateTimeInterface|\DateInterval|int|null $ttl = null)
* @method static void refreshEventDispatcher()
* @method static mixed remember(string $key, \Closure|\DateTimeInterface|\DateInterval|int|null $ttl, \Closure $callback)
* @method static mixed rememberForever(string $key, \Closure $callback)
* @method static \Illuminate\Cache\Repository repository(\Illuminate\Contracts\Cache\Store $store)
* @method static mixed sear(string $key, \Closure $callback)
* @method static bool set()
* @method static \Illuminate\Cache\Repository setDefaultCacheTime(int|null $seconds)
* @method static void setDefaultDriver(string $name)
* @method static void setEventDispatcher(\Illuminate\Contracts\Events\Dispatcher $events)
* @method static bool setMultiple()
* @method static \Illuminate\Contracts\Cache\Repository store(string|null $name = null)
* @method static bool supportsTags()
* @method static \Illuminate\Cache\TaggedCache tags(array|mixed $names)

\Illuminate\Support\Facades\Config

* @method static array all()
* @method static mixed get(array|string $key, mixed $default = null)
* @method static array getMany(array $keys)
* @method static bool has(string $key)
* @method static bool offsetExists(string $key)
* @method static mixed offsetGet(string $key)
* @method static void offsetSet(string $key, mixed $value)
* @method static void offsetUnset(string $key)
* @method static void prepend(string $key, mixed $value)
* @method static void push(string $key, mixed $value)
* @method static void set(array|string $key, mixed $value = null)

\Illuminate\Support\Facades\Cookie

* @method static void expire(string $name, string|null $path = null, string|null $domain = null)
* @method static void flushMacros()
* @method static \Illuminate\Cookie\CookieJar flushQueuedCookies()
* @method static \Symfony\Component\HttpFoundation\Cookie forever(string $name, string $value, string|null $path = null, string|null $domain = null, bool|null $secure = null, bool $httpOnly = true, bool $raw = false, string|null $sameSite = null)
* @method static \Symfony\Component\HttpFoundation\Cookie forget(string $name, string|null $path = null, string|null $domain = null)
* @method static \Symfony\Component\HttpFoundation\Cookie[] getQueuedCookies()
* @method static bool hasMacro(string $name)
* @method static bool hasQueued(string $key, string|null $path = null)
* @method static void macro(string $name, object|callable $macro)
* @method static \Symfony\Component\HttpFoundation\Cookie make(string $name, string $value, int $minutes = 0, string|null $path = null, string|null $domain = null, bool|null $secure = null, bool $httpOnly = true, bool $raw = false, string|null $sameSite = null)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static void queue(array $parameters)
* @method static \Symfony\Component\HttpFoundation\Cookie|null queued(string $key, mixed $default = null, string|null $path = null)
* @method static \Illuminate\Cookie\CookieJar setDefaultPathAndDomain(string $path, string $domain, bool $secure = false, string|null $sameSite = null)
* @method static void unqueue(string $name, string|null $path = null)

\Illuminate\Support\Facades\Crypt

* @method static mixed decrypt(string $payload, bool $unserialize = true)
* @method static string decryptString(string $payload)
* @method static string encrypt(mixed $value, bool $serialize = true)
* @method static string encryptString(string $value)
* @method static string generateKey(string $cipher)
* @method static string getKey()
* @method static bool supported(string $key, string $cipher)

\Illuminate\Support\Facades\Date

* @method static mixed use(mixed $handler)
* @method static void useCallable(callable $callable)
* @method static void useClass(string $dateClass)
* @method static void useDefault()
* @method static void useFactory(object $factory)

\Illuminate\Support\Facades\DB

* @method static int affectingStatement(string $query, array $bindings = [])
* @method static void afterCommit(callable $callback)
* @method static void allowQueryDurationHandlersToRunAgain()
* @method static string[] availableDrivers()
* @method static \Illuminate\Database\Connection beforeExecuting(\Closure $callback)
* @method static void beginTransaction()
* @method static void bindValues(\PDOStatement $statement, array $bindings)
* @method static void commit()
* @method static \Illuminate\Database\Connection connection(string|null $name = null)
* @method static \Generator cursor(string $query, array $bindings = [], bool $useReadPdo = true)
* @method static int delete(string $query, array $bindings = [])
* @method static void disableQueryLog()
* @method static void disconnect(string|null $name = null)
* @method static void enableQueryLog()
* @method static void extend(string $name, callable $resolver)
* @method static void flushMacros()
* @method static void flushQueryLog()
* @method static void forgetExtension(string $name)
* @method static void forgetRecordModificationState()
* @method static mixed getConfig(string|null $option = null)
* @method static array<string, \Illuminate\Database\Connection> getConnections()
* @method static string getDatabaseName()
* @method static string getDefaultConnection()
* @method static \Doctrine\DBAL\Schema\Column getDoctrineColumn(string $table, string $column)
* @method static \Doctrine\DBAL\Connection getDoctrineConnection()
* @method static \Doctrine\DBAL\Schema\AbstractSchemaManager getDoctrineSchemaManager()
* @method static string getDriverName()
* @method static \Illuminate\Contracts\Events\Dispatcher getEventDispatcher()
* @method static string|null getName()
* @method static string|null getNameWithReadWriteType()
* @method static \PDO getPdo()
* @method static \Illuminate\Database\Query\Processors\Processor getPostProcessor()
* @method static \Illuminate\Database\Query\Grammars\Grammar getQueryGrammar()
* @method static array getQueryLog()
* @method static \PDO|\Closure|null getRawPdo()
* @method static \PDO|\Closure|null getRawReadPdo()
* @method static \PDO getReadPdo()
* @method static mixed getResolver(string $driver)
* @method static \Illuminate\Database\Schema\Builder getSchemaBuilder()
* @method static \Illuminate\Database\Schema\Grammars\Grammar getSchemaGrammar()
* @method static string getTablePrefix()
* @method static bool hasMacro(string $name)
* @method static bool hasModifiedRecords()
* @method static bool insert(string $query, array $bindings = [])
* @method static bool isDoctrineAvailable()
* @method static void listen(\Closure $callback)
* @method static void logQuery(string $query, array $bindings, float|null $time = null)
* @method static bool logging()
* @method static void macro(string $name, object|callable $macro)
* @method static mixed macroCall(string $method, array $parameters)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static array prepareBindings(array $bindings)
* @method static array pretend(\Closure $callback)
* @method static bool pretending()
* @method static void purge(string|null $name = null)
* @method static \Illuminate\Database\Query\Builder query()
* @method static \Illuminate\Database\Query\Expression raw(mixed $value)
* @method static \Illuminate\Database\Connection reconnect(string|null $name = null)
* @method static void recordsHaveBeenModified(bool $value = true)
* @method static void registerDoctrineType(string $class, string $name, string $type)
* @method static void resetTotalQueryDuration()
* @method static void resolverFor(string $driver, \Closure $callback)
* @method static void rollBack(int|null $toLevel = null)
* @method static mixed scalar(string $query, array $bindings = [], bool $useReadPdo = true)
* @method static array select(string $query, array $bindings = [], bool $useReadPdo = true)
* @method static array selectFromWriteConnection(string $query, array $bindings = [])
* @method static mixed selectOne(string $query, array $bindings = [], bool $useReadPdo = true)
* @method static \Illuminate\Database\DatabaseManager setApplication(\Illuminate\Contracts\Foundation\Application $app)
* @method static \Illuminate\Database\Connection setDatabaseName(string $database)
* @method static void setDefaultConnection(string $name)
* @method static \Illuminate\Database\Connection setEventDispatcher(\Illuminate\Contracts\Events\Dispatcher $events)
* @method static \Illuminate\Database\Connection setPdo(\PDO|\Closure|null $pdo)
* @method static \Illuminate\Database\Connection setPostProcessor(\Illuminate\Database\Query\Processors\Processor $processor)
* @method static \Illuminate\Database\Connection setQueryGrammar(\Illuminate\Database\Query\Grammars\Grammar $grammar)
* @method static \Illuminate\Database\Connection setReadPdo(\PDO|\Closure|null $pdo)
* @method static \Illuminate\Database\Connection setReadWriteType(string|null $readWriteType)
* @method static void setReconnector(callable $reconnector)
* @method static \Illuminate\Database\Connection setRecordModificationState(bool $value)
* @method static \Illuminate\Database\Connection setSchemaGrammar(\Illuminate\Database\Schema\Grammars\Grammar $grammar)
* @method static \Illuminate\Database\Connection setTablePrefix(string $prefix)
* @method static \Illuminate\Database\Connection setTransactionManager(\Illuminate\Database\DatabaseTransactionsManager $manager)
* @method static bool statement(string $query, array $bindings = [])
* @method static string[] supportedDrivers()
* @method static \Illuminate\Database\Query\Builder table(\Closure|\Illuminate\Database\Query\Builder|string $table, string|null $as = null)
* @method static float totalQueryDuration()
* @method static mixed transaction(\Closure $callback, int $attempts = 1)
* @method static int transactionLevel()
* @method static bool unprepared(string $query)
* @method static void unsetEventDispatcher()
* @method static void unsetTransactionManager()
* @method static int update(string $query, array $bindings = [])
* @method static void useDefaultPostProcessor()
* @method static void useDefaultQueryGrammar()
* @method static void useDefaultSchemaGrammar()
* @method static \Illuminate\Database\Connection useWriteConnectionWhenReading(bool $value = true)
* @method static mixed usingConnection(string $name, callable $callback)
* @method static void whenQueryingForLongerThan(\DateTimeInterface|\Carbon\CarbonInterval|float|int $threshold, callable $handler)
* @method static \Illuminate\Database\Grammar withTablePrefix(\Illuminate\Database\Grammar $grammar)

\Illuminate\Support\Facades\Event

* @method static \Closure createClassListener(string $listener, bool $wildcard = false)
* @method static array|null dispatch(string|object $event, mixed $payload = [], bool $halt = false)
* @method static void flush(string $event)
* @method static void flushMacros()
* @method static void forget(string $event)
* @method static void forgetPushed()
* @method static array getListeners(string $eventName)
* @method static array getRawListeners()
* @method static bool hasListeners(string $eventName)
* @method static bool hasMacro(string $name)
* @method static bool hasWildcardListeners(string $eventName)
* @method static void listen(\Closure|string|array $events, \Closure|string|array|null $listener = null)
* @method static void macro(string $name, object|callable $macro)
* @method static \Closure makeListener(\Closure|string|array $listener, bool $wildcard = false)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static void push(string $event, object|array $payload = [])
* @method static \Illuminate\Events\Dispatcher setQueueResolver(callable $resolver)
* @method static void subscribe(object|string $subscriber)
* @method static array|null until(string|object $event, mixed $payload = [])

\Illuminate\Support\Facades\File

* @method static \Symfony\Component\Finder\SplFileInfo[] allFiles(string $directory, bool $hidden = false)
* @method static int append(string $path, string $data)
* @method static string basename(string $path)
* @method static mixed chmod(string $path, int|null $mode = null)
* @method static bool cleanDirectory(string $directory)
* @method static bool copy(string $path, string $target)
* @method static bool copyDirectory(string $directory, string $destination, int|null $options = null)
* @method static bool delete(string|array $paths)
* @method static bool deleteDirectories(string $directory)
* @method static bool deleteDirectory(string $directory, bool $preserve = false)
* @method static array directories(string $directory)
* @method static string dirname(string $path)
* @method static void ensureDirectoryExists(string $path, int $mode = 493, bool $recursive = true)
* @method static bool exists(string $path)
* @method static string extension(string $path)
* @method static \Symfony\Component\Finder\SplFileInfo[] files(string $directory, bool $hidden = false)
* @method static void flushMacros()
* @method static string get(string $path, bool $lock = false)
* @method static mixed getRequire(string $path, array $data = [])
* @method static array glob(string $pattern, int $flags = 0)
* @method static string|null guessExtension(string $path)
* @method static bool hasMacro(string $name)
* @method static bool hasSameHash(string $firstFile, string $secondFile)
* @method static string hash(string $path)
* @method static bool isDirectory(string $directory)
* @method static bool isEmptyDirectory(string $directory, bool $ignoreDotFiles = false)
* @method static bool isFile(string $file)
* @method static bool isReadable(string $path)
* @method static bool isWritable(string $path)
* @method static int lastModified(string $path)
* @method static \Illuminate\Support\LazyCollection lines(string $path)
* @method static void link(string $target, string $link)
* @method static void macro(string $name, object|callable $macro)
* @method static bool makeDirectory(string $path, int $mode = 493, bool $recursive = false, bool $force = false)
* @method static string|false mimeType(string $path)
* @method static bool missing(string $path)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static bool move(string $path, string $target)
* @method static bool moveDirectory(string $from, string $to, bool $overwrite = false)
* @method static string name(string $path)
* @method static int prepend(string $path, string $data)
* @method static int|bool put(string $path, string $contents, bool $lock = false)
* @method static void relativeLink(string $target, string $link)
* @method static void replace(string $path, string $content)
* @method static void replaceInFile(array|string $search, array|string $replace, string $path)
* @method static mixed requireOnce(string $path, array $data = [])
* @method static string sharedGet(string $path)
* @method static int size(string $path)
* @method static string type(string $path)

\Illuminate\Support\Facades\Gate

* @method static array abilities()
* @method static \Illuminate\Contracts\Auth\Access\Gate after(callable $callback)
* @method static \Illuminate\Auth\Access\Response allowIf(\Illuminate\Auth\Access\Response|\Closure|bool $condition, string|null $message = null, string|null $code = null)
* @method static bool allows(string $ability, array|mixed $arguments = [])
* @method static bool any(iterable|string $abilities, array|mixed $arguments = [])
* @method static \Illuminate\Auth\Access\Response authorize(string $ability, array|mixed $arguments = [])
* @method static \Illuminate\Contracts\Auth\Access\Gate before(callable $callback)
* @method static bool check(iterable|string $abilities, array|mixed $arguments = [])
* @method static \Illuminate\Contracts\Auth\Access\Gate define(string $ability, callable|string $callback)
* @method static bool denies(string $ability, array|mixed $arguments = [])
* @method static \Illuminate\Auth\Access\Response denyIf(\Illuminate\Auth\Access\Response|\Closure|bool $condition, string|null $message = null, string|null $code = null)
* @method static static forUser(\Illuminate\Contracts\Auth\Authenticatable|mixed $user)
* @method static mixed getPolicyFor(object|string $class)
* @method static \Illuminate\Auth\Access\Gate guessPolicyNamesUsing(callable $callback)
* @method static bool has(string $ability)
* @method static \Illuminate\Auth\Access\Response inspect(string $ability, array|mixed $arguments = [])
* @method static bool none(iterable|string $abilities, array|mixed $arguments = [])
* @method static array policies()
* @method static \Illuminate\Contracts\Auth\Access\Gate policy(string $class, string $policy)
* @method static mixed raw(string $ability, array|mixed $arguments = [])
* @method static mixed resolvePolicy(object|string $class)
* @method static \Illuminate\Contracts\Auth\Access\Gate resource(string $name, string $class, array|null $abilities = null)
* @method static \Illuminate\Auth\Access\Gate setContainer(\Illuminate\Contracts\Container\Container $container)

\Illuminate\Support\Facades\Hash

* @method static bool check(string $value, string $hashedValue, array $options = [])
* @method static \Illuminate\Hashing\Argon2IdHasher createArgon2idDriver()
* @method static \Illuminate\Hashing\ArgonHasher createArgonDriver()
* @method static \Illuminate\Hashing\BcryptHasher createBcryptDriver()
* @method static mixed driver(string|null $driver = null)
* @method static \Illuminate\Hashing\HashManager extend(string $driver, \Closure $callback)
* @method static \Illuminate\Hashing\HashManager forgetDrivers()
* @method static \Illuminate\Contracts\Container\Container getContainer()
* @method static string getDefaultDriver()
* @method static array getDrivers()
* @method static array info(string $hashedValue)
* @method static string make(string $value, array $options = [])
* @method static bool needsRehash(string $hashedValue, array $options = [])
* @method static \Illuminate\Hashing\HashManager setContainer(\Illuminate\Contracts\Container\Container $container)

\Illuminate\Support\Facades\Http

* @method static \Illuminate\Http\Client\Factory allowStrayRequests()
* @method static void assertNotSent(callable $callback)
* @method static void assertNothingSent()
* @method static void assertSent(callable $callback)
* @method static void assertSentCount(int $count)
* @method static void assertSentInOrder(array $callbacks)
* @method static void assertSequencesAreEmpty()
* @method static \Illuminate\Http\Client\Factory fake(callable|array $callback = null)
* @method static \Illuminate\Http\Client\ResponseSequence fakeSequence(string $url = *)
* @method static void flushMacros()
* @method static \Illuminate\Contracts\Events\Dispatcher|null getDispatcher()
* @method static bool hasMacro(string $name)
* @method static void macro(string $name, object|callable $macro)
* @method static mixed macroCall(string $method, array $parameters)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static \Illuminate\Http\Client\Factory preventStrayRequests(bool $prevent = true)
* @method static void recordRequestResponsePair(\Illuminate\Http\Client\Request $request, \Illuminate\Http\Client\Response $response)
* @method static \Illuminate\Support\Collection recorded(callable $callback = null)
* @method static \GuzzleHttp\Promise\PromiseInterface response(array|string|null $body = null, int $status = 200, array $headers = [])
* @method static \Illuminate\Http\Client\ResponseSequence sequence(array $responses = [])
* @method static \Illuminate\Http\Client\Factory stubUrl(string $url, \Illuminate\Http\Client\Response|\GuzzleHttp\Promise\PromiseInterface|callable $callback)

\Illuminate\Support\Facades\Lang

* @method static void addJsonPath(string $path)
* @method static void addLines(array $lines, string $locale, string $namespace = *)
* @method static void addNamespace(string $namespace, string $hint)
* @method static string choice(string $key, \Countable|int|array $number, array $replace = [], string|null $locale = null)
* @method static void determineLocalesUsing(callable $callback)
* @method static void flushMacros()
* @method static void flushParsedKeys()
* @method static string|array get(string $key, array $replace = [], string|null $locale = null, bool $fallback = true)
* @method static string getFallback()
* @method static \Illuminate\Contracts\Translation\Loader getLoader()
* @method static string getLocale()
* @method static \Illuminate\Translation\MessageSelector getSelector()
* @method static bool has(string $key, string|null $locale = null, bool $fallback = true)
* @method static bool hasForLocale(string $key, string|null $locale = null)
* @method static bool hasMacro(string $name)
* @method static void load(string $namespace, string $group, string $locale)
* @method static string locale()
* @method static void macro(string $name, object|callable $macro)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static array parseKey(string $key)
* @method static void setFallback(string $fallback)
* @method static void setLoaded(array $loaded)
* @method static void setLocale(string $locale)
* @method static void setParsedKey(string $key, array $parsed)
* @method static void setSelector(\Illuminate\Translation\MessageSelector $selector)

\Illuminate\Support\Facades\Log

* @method static void alert(\Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static \Psr\Log\LoggerInterface build(array $config)
* @method static \Psr\Log\LoggerInterface channel(string|null $channel = null)
* @method static void critical(\Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static void debug(\Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static \Psr\Log\LoggerInterface driver(string|null $driver = null)
* @method static void emergency(\Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static void error(\Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static \Illuminate\Log\LogManager extend(string $driver, \Closure $callback)
* @method static \Illuminate\Log\LogManager flushSharedContext()
* @method static \Illuminate\Log\LogManager forgetChannel(string|null $driver = null)
* @method static array getChannels()
* @method static string|null getDefaultDriver()
* @method static \Illuminate\Contracts\Events\Dispatcher getEventDispatcher()
* @method static \Psr\Log\LoggerInterface getLogger()
* @method static void info(\Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static void listen(\Closure $callback)
* @method static void log(string $level, \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static void notice(\Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static void setDefaultDriver(string $name)
* @method static void setEventDispatcher(\Illuminate\Contracts\Events\Dispatcher $dispatcher)
* @method static \Illuminate\Log\LogManager shareContext(array $context)
* @method static array sharedContext()
* @method static \Psr\Log\LoggerInterface stack(array $channels, string|null $channel = null)
* @method static void warning(\Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])
* @method static \Illuminate\Log\Logger withContext(array $context = [])
* @method static \Illuminate\Log\Logger withoutContext()
* @method static void write(string $level, \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string $message, array $context = [])

\Illuminate\Support\Facades\Mail

* @method static void alwaysFrom(string $address, string|null $name = null)
* @method static void alwaysReplyTo(string $address, string|null $name = null)
* @method static void alwaysReturnPath(string $address)
* @method static void alwaysTo(string $address, string|null $name = null)
* @method static void assertNotOutgoing(string|\Closure $mailable, callable|null $callback = null)
* @method static void assertNotQueued(string|\Closure $mailable, callable|null $callback = null)
* @method static void assertNotSent(string|\Closure $mailable, callable|null $callback = null)
* @method static void assertNothingOutgoing()
* @method static void assertNothingQueued()
* @method static void assertNothingSent()
* @method static void assertQueued(string|\Closure $mailable, callable|int|null $callback = null)
* @method static void assertSent(string|\Closure $mailable, callable|int|null $callback = null)
* @method static \Illuminate\Mail\PendingMail bcc(mixed $users)
* @method static \Illuminate\Mail\PendingMail cc(mixed $users)
* @method static \Symfony\Component\Mailer\Transport\TransportInterface createSymfonyTransport(array $config)
* @method static \Illuminate\Mail\Mailer driver(string|null $driver = null)
* @method static \Illuminate\Mail\MailManager extend(string $driver, \Closure $callback)
* @method static array failures()
* @method static void flushMacros()
* @method static \Illuminate\Support\Testing\Fakes\MailFake forgetMailers()
* @method static \Illuminate\Contracts\Foundation\Application getApplication()
* @method static string getDefaultDriver()
* @method static \Symfony\Component\Mailer\Transport\TransportInterface getSymfonyTransport()
* @method static \Illuminate\Contracts\View\Factory getViewFactory()
* @method static bool hasMacro(string $name)
* @method static bool hasQueued(string $mailable)
* @method static bool hasSent(string $mailable)
* @method static \Illuminate\Mail\SentMessage|null html(string $html, mixed $callback)
* @method static mixed later(\DateTimeInterface|\DateInterval|int $delay, \Illuminate\Contracts\Mail\Mailable $view, string|null $queue = null)
* @method static mixed laterOn(string $queue, \DateTimeInterface|\DateInterval|int $delay, \Illuminate\Contracts\Mail\Mailable $view)
* @method static void macro(string $name, object|callable $macro)
* @method static \Illuminate\Contracts\Mail\Mailer mailer(string|null $name = null)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static mixed onQueue(string $queue, \Illuminate\Contracts\Mail\Mailable $view)
* @method static \Illuminate\Mail\SentMessage|null plain(string $view, array $data, mixed $callback)
* @method static void purge(string|null $name = null)
* @method static mixed queue(\Illuminate\Contracts\Mail\Mailable|string|array $view, string|null $queue = null)
* @method static mixed queueOn(string $queue, \Illuminate\Contracts\Mail\Mailable $view)
* @method static \Illuminate\Support\Collection queued(string|\Closure $mailable, callable|null $callback = null)
* @method static \Illuminate\Mail\SentMessage|null raw(string $text, mixed $callback)
* @method static string render(string|array $view, array $data = [])
* @method static \Illuminate\Mail\SentMessage|null send(\Illuminate\Contracts\Mail\Mailable|string|array $view, array $data = [], \Closure|string|null $callback = null)
* @method static \Illuminate\Support\Collection sent(string|\Closure $mailable, callable|null $callback = null)
* @method static \Illuminate\Mail\MailManager setApplication(\Illuminate\Contracts\Foundation\Application $app)
* @method static void setDefaultDriver(string $name)
* @method static \Illuminate\Mail\Mailer setQueue(\Illuminate\Contracts\Queue\Factory $queue)
* @method static void setSymfonyTransport(\Symfony\Component\Mailer\Transport\TransportInterface $transport)
* @method static \Illuminate\Mail\PendingMail to(mixed $users)

\Illuminate\Support\Facades\Notification

* @method static mixed channel(string|null $name = null)
* @method static void deliverVia(string $channel)
* @method static string deliversVia()
* @method static mixed driver(string|null $driver = null)
* @method static \Illuminate\Notifications\ChannelManager extend(string $driver, \Closure $callback)
* @method static \Illuminate\Notifications\ChannelManager forgetDrivers()
* @method static \Illuminate\Contracts\Container\Container getContainer()
* @method static string getDefaultDriver()
* @method static array getDrivers()
* @method static \Illuminate\Notifications\ChannelManager locale(string $locale)
* @method static void send(\Illuminate\Support\Collection|array|mixed $notifiables, mixed $notification)
* @method static void sendNow(\Illuminate\Support\Collection|array|mixed $notifiables, mixed $notification, array|null $channels = null)
* @method static \Illuminate\Notifications\ChannelManager setContainer(\Illuminate\Contracts\Container\Container $container)

\Illuminate\Support\Facades\ParallelTesting

* @method static void callSetUpProcessCallbacks()
* @method static void callSetUpTestCaseCallbacks(\Illuminate\Foundation\Testing\TestCase $testCase)
* @method static void callSetUpTestDatabaseCallbacks(string $database)
* @method static void callTearDownProcessCallbacks()
* @method static void callTearDownTestCaseCallbacks(\Illuminate\Foundation\Testing\TestCase $testCase)
* @method static mixed option(string $option)
* @method static void resolveOptionsUsing(\Closure|null $resolver)
* @method static void resolveTokenUsing(\Closure|null $resolver)
* @method static void setUpProcess(callable $callback)
* @method static void setUpTestCase(callable $callback)
* @method static void setUpTestDatabase(callable $callback)
* @method static void tearDownProcess(callable $callback)
* @method static void tearDownTestCase(callable $callback)
* @method static string|false token()

\Illuminate\Support\Facades\Password

* @method static \Illuminate\Contracts\Auth\PasswordBroker broker(string|null $name = null)
* @method static string createToken(\Illuminate\Contracts\Auth\CanResetPassword $user)
* @method static void deleteToken(\Illuminate\Contracts\Auth\CanResetPassword $user)
* @method static string getDefaultDriver()
* @method static \Illuminate\Auth\Passwords\TokenRepositoryInterface getRepository()
* @method static \Illuminate\Contracts\Auth\CanResetPassword|null getUser(array $credentials)
* @method static mixed reset(array $credentials, \Closure $callback)
* @method static string sendResetLink(array $credentials, \Closure|null $callback = null)
* @method static void setDefaultDriver(string $name)
* @method static bool tokenExists(\Illuminate\Contracts\Auth\CanResetPassword $user, string $token)

\Illuminate\Support\Facades\Queue

* @method static void addConnector(string $driver, \Closure $resolver)
* @method static void after(mixed $callback)
* @method static void before(mixed $callback)
* @method static void bulk(array $jobs, mixed $data = '', string|null $queue = null)
* @method static bool connected(string|null $name = null)
* @method static \Illuminate\Contracts\Queue\Queue connection(string|null $name = null)
* @method static void createPayloadUsing(callable|null $callback)
* @method static void exceptionOccurred(mixed $callback)
* @method static void extend(string $driver, \Closure $resolver)
* @method static void failing(mixed $callback)
* @method static \Illuminate\Contracts\Foundation\Application getApplication()
* @method static string getConnectionName()
* @method static \Illuminate\Container\Container getContainer()
* @method static string getDefaultDriver()
* @method static mixed getJobBackoff(mixed $job)
* @method static mixed getJobExpiration(mixed $job)
* @method static string getName(string|null $connection = null)
* @method static mixed laterOn(string $queue, \DateTimeInterface|\DateInterval|int $delay, string $job, mixed $data = '')
* @method static void looping(mixed $callback)
* @method static mixed pushOn(string $queue, string $job, mixed $data = '')
* @method static \Illuminate\Queue\QueueManager setApplication(\Illuminate\Contracts\Foundation\Application $app)
* @method static \Illuminate\Queue\Queue setConnectionName(string $name)
* @method static void setContainer(\Illuminate\Container\Container $container)
* @method static void setDefaultDriver(string $name)
* @method static void stopping(mixed $callback)

\Illuminate\Support\Facades\RateLimiter

* @method static mixed attempt(string $key, int $maxAttempts, \Closure $callback, int $decaySeconds = 60)
* @method static mixed attempts(string $key)
* @method static int availableIn(string $key)
* @method static string cleanRateLimiterKey(string $key)
* @method static void clear(string $key)
* @method static \Illuminate\Cache\RateLimiter for(string $name, \Closure $callback)
* @method static int hit(string $key, int $decaySeconds = 60)
* @method static \Closure limiter(string $name)
* @method static int remaining(string $key, int $maxAttempts)
* @method static mixed resetAttempts(string $key)
* @method static int retriesLeft(string $key, int $maxAttempts)
* @method static bool tooManyAttempts(string $key, int $maxAttempts)

\Illuminate\Support\Facades\Redirect

* @method static \Illuminate\Http\RedirectResponse action(string|array $action, mixed $parameters = [], int $status = 302, array $headers = [])
* @method static \Illuminate\Http\RedirectResponse away(string $path, int $status = 302, array $headers = [])
* @method static \Illuminate\Http\RedirectResponse back(int $status = 302, array $headers = [], mixed $fallback = false)
* @method static void flushMacros()
* @method static \Illuminate\Routing\UrlGenerator getUrlGenerator()
* @method static \Illuminate\Http\RedirectResponse guest(string $path, int $status = 302, array $headers = [], bool|null $secure = null)
* @method static bool hasMacro(string $name)
* @method static \Illuminate\Http\RedirectResponse home(int $status = 302)
* @method static \Illuminate\Http\RedirectResponse intended(mixed $default = /, int $status = 302, array $headers = [], bool|null $secure = null)
* @method static void macro(string $name, object|callable $macro)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static \Illuminate\Http\RedirectResponse refresh(int $status = 302, array $headers = [])
* @method static \Illuminate\Http\RedirectResponse route(string $route, mixed $parameters = [], int $status = 302, array $headers = [])
* @method static \Illuminate\Http\RedirectResponse secure(string $path, int $status = 302, array $headers = [])
* @method static \Illuminate\Routing\Redirector setIntendedUrl(string $url)
* @method static void setSession(\Illuminate\Session\Store $session)
* @method static \Illuminate\Http\RedirectResponse signedRoute(string $route, mixed $parameters = [], \DateTimeInterface|\DateInterval|int|null $expiration = null, int $status = 302, array $headers = [])
* @method static \Illuminate\Http\RedirectResponse temporarySignedRoute(string $route, \DateTimeInterface|\DateInterval|int|null $expiration, mixed $parameters = [], int $status = 302, array $headers = [])
* @method static \Illuminate\Http\RedirectResponse to(string $path, int $status = 302, array $headers = [], bool|null $secure = null)

\Illuminate\Support\Facades\Redis

* @method static \Illuminate\Redis\Connections\Connection connection(string|null $name = null)
* @method static array connections()
* @method static void disableEvents()
* @method static void enableEvents()
* @method static \Illuminate\Redis\RedisManager extend(string $driver, \Closure $callback)
* @method static void purge(string|null $name = null)
* @method static \Illuminate\Redis\Connections\Connection resolve(string|null $name = null)
* @method static void setDriver(string $driver)

\Illuminate\Support\Facades\Request

* @method static bool accepts(string|array $contentTypes)
* @method static bool acceptsAnyContentType()
* @method static bool acceptsHtml()
* @method static bool acceptsJson()
* @method static bool ajax()
* @method static array all(array|mixed|null $keys = null)
* @method static array allFiles()
* @method static bool anyFilled(string|array $keys)
* @method static string|null bearerToken()
* @method static bool boolean(string|null $key = null, bool $default = false)
* @method static static capture()
* @method static \Illuminate\Support\Collection collect(array|string|null $key = null)
* @method static string|array|null cookie(string|null $key = null, string|array|null $default = null)
* @method static create(string    $uri  The URI, string    $method  The HTTP method, array    $parameters The query (GET) or request (POST) parameters, array    $cookies The request cookies ($_COOKIE), array    $files  The request files ($_FILES), array    $server  The server parameters ($_SERVER), string|resource|null $content The raw body data)
* @method static static createFrom(\Illuminate\Http\Request $from, \Illuminate\Http\Request|null $to = null)
* @method static static createFromBase(\Symfony\Component\HttpFoundation\Request $request)
* @method static createFromGlobals()
* @method static \Illuminate\Support\Carbon|null date(string $key, string|null $format = null, string|null $tz = null)
* @method static void dd(mixed $keys)
* @method static string decodedPath()
* @method static \Illuminate\Http\Request dump(mixed $keys = [])
* @method static static duplicate()
* @method static enableHttpMethodParameterOverride()
* @method static array except(array|mixed $keys)
* @method static bool exists(string|array $key)
* @method static bool expectsJson()
* @method static \Illuminate\Http\UploadedFile|\Illuminate\Http\UploadedFile[]|array|null file(string|null $key = null, mixed $default = null)
* @method static bool filled(string|array $key)
* @method static string fingerprint()
* @method static void flash()
* @method static void flashExcept(array|mixed $keys)
* @method static void flashOnly(array|mixed $keys)
* @method static void flush()
* @method static void flushMacros()
* @method static string format(string $default = html)
* @method static string fullUrl()
* @method static bool fullUrlIs(mixed ...$patterns)
* @method static string fullUrlWithQuery(array $query)
* @method static string fullUrlWithoutQuery(array|string $keys)
* @method static mixed get(string $key, mixed $default = null)
* @method static getAcceptableContentTypes()
* @method static string The raw path (i.e. not urldecoded) getBasePath()
* @method static string The raw URL (i.e. not urldecoded) getBaseUrl()
* @method static getCharsets()
* @method static getClientIp()
* @method static getClientIps()
* @method static string|resource getContent(bool $asResource If true, a resource will be returned)
* @method static getContentType()
* @method static getDefaultLocale()
* @method static getETags()
* @method static getEncodings()
* @method static getFormat()
* @method static getHost()
* @method static getHttpHost()
* @method static getHttpMethodParameterOverride()
* @method static getLanguages()
* @method static getLocale()
* @method static getMethod()
* @method static getMimeType()
* @method static getMimeTypes()
* @method static getPassword()
* @method static string The raw path (i.e. not urldecoded) getPathInfo()
* @method static int|string|null Can be a string if fetched from the server bag getPort()
* @method static getPreferredFormat()
* @method static getPreferredLanguage(string[] $locales An array of ordered available locales)
* @method static getProtocolVersion()
* @method static getQueryString()
* @method static getRealMethod()
* @method static getRelativeUriForPath()
* @method static getRequestFormat()
* @method static string The raw URI (i.e. not URI decoded) getRequestUri()
* @method static \Closure getRouteResolver()
* @method static getScheme()
* @method static getSchemeAndHttpHost()
* @method static getScriptName()
* @method static getSession()
* @method static int A bit field of Request::HEADER_* that defines which headers are trusted from your proxies getTrustedHeaderSet()
* @method static getTrustedHosts()
* @method static getTrustedProxies()
* @method static getUri()
* @method static getUriForPath(string $path A path to use instead of the current one)
* @method static getUser()
* @method static string|null A user name if any and, optionally, scheme-specific information about how to gain authorization to access the server getUserInfo()
* @method static \Closure getUserResolver()
* @method static bool has(string|array $key)
* @method static bool hasAny(string|array $keys)
* @method static bool hasCookie(string $key)
* @method static bool hasFile(string $key)
* @method static bool hasHeader(string $key)
* @method static bool hasMacro(string $name)
* @method static hasPreviousSession()
* @method static hasSession()
* @method static string|array|null header(string|null $key = null, string|array|null $default = null)
* @method static string host()
* @method static string httpHost()
* @method static initialize(array    $query  The GET parameters, array    $request The POST parameters, array    $attributes The request attributes (parameters parsed from the PATH_INFO, ...), array    $cookies The COOKIE parameters, array    $files  The FILES parameters, array    $server  The SERVER parameters, string|resource|null $content The raw body data)
* @method static mixed input(string|null $key = null, mixed $default = null)
* @method static \Illuminate\Http\Request instance()
* @method static string|null ip()
* @method static array ips()
* @method static bool is(mixed ...$patterns)
* @method static isFromTrustedProxy()
* @method static bool isJson()
* @method static isMethod(string $method Uppercase request method (GET, POST etc))
* @method static isMethodCacheable()
* @method static isMethodIdempotent()
* @method static isMethodSafe()
* @method static isNoCache()
* @method static bool isNotFilled(string|array $key)
* @method static isSecure()
* @method static isXmlHttpRequest()
* @method static \Symfony\Component\HttpFoundation\ParameterBag|mixed json(string|null $key = null, mixed $default = null)
* @method static array keys()
* @method static void macro(string $name, object|callable $macro)
* @method static bool matchesType(string $actual, string $type)
* @method static \Illuminate\Http\Request merge(array $input)
* @method static \Illuminate\Http\Request mergeIfMissing(array $input)
* @method static string method()
* @method static bool missing(string|array $key)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static normalizeQueryString()
* @method static bool offsetExists(string $offset)
* @method static mixed offsetGet(string $offset)
* @method static void offsetSet(string $offset, mixed $value)
* @method static void offsetUnset(string $offset)
* @method static string|array|null old(string|null $key = null, \Illuminate\Database\Eloquent\Model|string|array|null $default = null)
* @method static array only(array|mixed $keys)
* @method static overrideGlobals()
* @method static string path()
* @method static bool pjax()
* @method static string|array|null post(string|null $key = null, string|array|null $default = null)
* @method static preferSafeContent()
* @method static string|null prefers(string|array $contentTypes)
* @method static bool prefetch()
* @method static string|array|null query(string|null $key = null, string|array|null $default = null)
* @method static \Illuminate\Http\Request replace(array $input)
* @method static string root()
* @method static \Illuminate\Routing\Route|object|string|null route(string|null $param = null, mixed $default = null)
* @method static bool routeIs(mixed ...$patterns)
* @method static string schemeAndHttpHost()
* @method static bool secure()
* @method static string|null segment(int $index, string|null $default = null)
* @method static array segments()
* @method static string|array|null server(string|null $key = null, string|array|null $default = null)
* @method static \Illuminate\Contracts\Session\Session session()
* @method static setDefaultLocale()
* @method static setFactory()
* @method static setFormat(string|array $mimeTypes The associated mime types (the preferred one must be the first as it will be used as the content type))
* @method static \Illuminate\Http\Request setJson(\Symfony\Component\HttpFoundation\ParameterBag $json)
* @method static void setLaravelSession(\Illuminate\Contracts\Session\Session $session)
* @method static setLocale()
* @method static setMethod()
* @method static setRequestFormat()
* @method static \Illuminate\Http\Request setRouteResolver(\Closure $callback)
* @method static setSession()
* @method static setSessionFactory(callable(): SessionInterface $factory)
* @method static setTrustedHosts(array $hostPatterns A list of trusted host patterns)
* @method static setTrustedProxies(array $proxies   A list of trusted proxies, the string 'REMOTE_ADDR' will be replaced with $_SERVER['REMOTE_ADDR'], int $trustedHeaderSet A bit field of Request::HEADER_*, to set which headers to trust from your proxies)
* @method static \Illuminate\Http\Request setUserResolver(\Closure $callback)
* @method static \Illuminate\Support\Stringable str(string $key, mixed $default = null)
* @method static \Illuminate\Support\Stringable string(string $key, mixed $default = null)
* @method static array toArray()
* @method static string url()
* @method static mixed user(string|null $guard = null)
* @method static string|null userAgent()
* @method static bool wantsJson()
* @method static \Illuminate\Http\Request|mixed whenFilled(string $key, callable $callback, callable|null $default = null)
* @method static \Illuminate\Http\Request|mixed whenHas(string $key, callable $callback, callable|null $default = null)

\Illuminate\Support\Facades\Response

* @method static \Symfony\Component\HttpFoundation\BinaryFileResponse download(\SplFileInfo|string $file, string|null $name = null, array $headers = [], string|null $disposition = attachment)
* @method static \Symfony\Component\HttpFoundation\BinaryFileResponse file(\SplFileInfo|string $file, array $headers = [])
* @method static void flushMacros()
* @method static bool hasMacro(string $name)
* @method static \Illuminate\Http\JsonResponse json(mixed $data = [], int $status = 200, array $headers = [], int $options = 0)
* @method static \Illuminate\Http\JsonResponse jsonp(string $callback, mixed $data = [], int $status = 200, array $headers = [], int $options = 0)
* @method static void macro(string $name, object|callable $macro)
* @method static \Illuminate\Http\Response make(array|string $content = '', int $status = 200, array $headers = [])
* @method static void mixin(object $mixin, bool $replace = true)
* @method static \Illuminate\Http\Response noContent(int $status = 204, array $headers = [])
* @method static \Illuminate\Http\RedirectResponse redirectGuest(string $path, int $status = 302, array $headers = [], bool|null $secure = null)
* @method static \Illuminate\Http\RedirectResponse redirectTo(string $path, int $status = 302, array $headers = [], bool|null $secure = null)
* @method static \Illuminate\Http\RedirectResponse redirectToAction(string $action, mixed $parameters = [], int $status = 302, array $headers = [])
* @method static \Illuminate\Http\RedirectResponse redirectToIntended(string $default = /, int $status = 302, array $headers = [], bool|null $secure = null)
* @method static \Illuminate\Http\RedirectResponse redirectToRoute(string $route, mixed $parameters = [], int $status = 302, array $headers = [])
* @method static \Symfony\Component\HttpFoundation\StreamedResponse stream(\Closure $callback, int $status = 200, array $headers = [])
* @method static \Symfony\Component\HttpFoundation\StreamedResponse streamDownload(\Closure $callback, string|null $name = null, array $headers = [], string|null $disposition = attachment)
* @method static \Illuminate\Http\Response view(string|array $view, array $data = [], int $status = 200, array $headers = [])

\Illuminate\Support\Facades\Route

* @method static \Illuminate\Routing\Route addRoute(array|string $methods, string $uri, array|string|callable|null $action)
* @method static \Illuminate\Routing\Router aliasMiddleware(string $name, string $class)
* @method static \Illuminate\Routing\Route any(string $uri, array|string|callable|null $action = null)
* @method static \Illuminate\Routing\PendingResourceRegistration apiResource(string $name, string $controller, array $options = [])
* @method static void apiResources(array $resources, array $options = [])
* @method static void bind(string $key, string|callable $binder)
* @method static \Illuminate\Routing\Route|null current()
* @method static string|null currentRouteAction()
* @method static string|null currentRouteName()
* @method static bool currentRouteNamed(mixed ...$patterns)
* @method static bool currentRouteUses(string $action)
* @method static \Illuminate\Routing\Route delete(string $uri, array|string|callable|null $action = null)
* @method static \Symfony\Component\HttpFoundation\Response dispatch(\Illuminate\Http\Request $request)
* @method static \Symfony\Component\HttpFoundation\Response dispatchToRoute(\Illuminate\Http\Request $request)
* @method static \Illuminate\Routing\Route fallback(array|string|callable|null $action)
* @method static void flushMacros()
* @method static \Illuminate\Routing\Router flushMiddlewareGroups()
* @method static array gatherRouteMiddleware(\Illuminate\Routing\Route $route)
* @method static \Illuminate\Routing\Route get(string $uri, array|string|callable|null $action = null)
* @method static \Closure|null getBindingCallback(string $key)
* @method static \Illuminate\Http\Request getCurrentRequest()
* @method static \Illuminate\Routing\Route|null getCurrentRoute()
* @method static array getGroupStack()
* @method static string getLastGroupPrefix()
* @method static array getMiddleware()
* @method static array getMiddlewareGroups()
* @method static array getPatterns()
* @method static \Illuminate\Routing\RouteCollectionInterface getRoutes()
* @method static void group(array $attributes, \Closure|array|string $routes)
* @method static bool has(string|array $name)
* @method static bool hasGroupStack()
* @method static bool hasMacro(string $name)
* @method static bool hasMiddlewareGroup(string $name)
* @method static mixed input(string $key, string|null $default = null)
* @method static bool is(mixed ...$patterns)
* @method static void macro(string $name, object|callable $macro)
* @method static mixed macroCall(string $method, array $parameters)
* @method static \Illuminate\Routing\Route match(array|string $methods, string $uri, array|string|callable|null $action = null)
* @method static void matched(string|callable $callback)
* @method static array mergeWithLastGroup(array $new, bool $prependExistingPrefix = true)
* @method static \Illuminate\Routing\Router middlewareGroup(string $name, array $middleware)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static void model(string $key, string $class, \Closure|null $callback = null)
* @method static \Illuminate\Routing\Route newRoute(array|string $methods, string $uri, mixed $action)
* @method static \Illuminate\Routing\Route options(string $uri, array|string|callable|null $action = null)
* @method static \Illuminate\Routing\Route patch(string $uri, array|string|callable|null $action = null)
* @method static void pattern(string $key, string $pattern)
* @method static void patterns(array $patterns)
* @method static \Illuminate\Routing\Route permanentRedirect(string $uri, string $destination)
* @method static \Illuminate\Routing\Route post(string $uri, array|string|callable|null $action = null)
* @method static \Symfony\Component\HttpFoundation\Response prepareResponse(\Symfony\Component\HttpFoundation\Request $request, mixed $response)
* @method static \Illuminate\Routing\Router prependMiddlewareToGroup(string $group, string $middleware)
* @method static \Illuminate\Routing\Router pushMiddlewareToGroup(string $group, string $middleware)
* @method static \Illuminate\Routing\Route put(string $uri, array|string|callable|null $action = null)
* @method static \Illuminate\Routing\Route redirect(string $uri, string $destination, int $status = 302)
* @method static array resolveMiddleware(array $middleware, array $excluded = [])
* @method static \Illuminate\Routing\PendingResourceRegistration resource(string $name, string $controller, array $options = [])
* @method static void resourceParameters(array $parameters = [])
* @method static array|null resourceVerbs(array $verbs = [])
* @method static void resources(array $resources, array $options = [])
* @method static \Symfony\Component\HttpFoundation\Response respondWithRoute(string $name)
* @method static void setCompiledRoutes(array $routes)
* @method static \Illuminate\Routing\Router setContainer(\Illuminate\Container\Container $container)
* @method static void setRoutes(\Illuminate\Routing\RouteCollection $routes)
* @method static void singularResourceParameters(bool $singular = true)
* @method static \Illuminate\Routing\Route substituteBindings(\Illuminate\Routing\Route $route)
* @method static void substituteImplicitBindings(\Illuminate\Routing\Route $route)
* @method static \Symfony\Component\HttpFoundation\Response toResponse(\Symfony\Component\HttpFoundation\Request $request, mixed $response)
* @method static array uniqueMiddleware(array $middleware)
* @method static bool uses(array ...$patterns)
* @method static \Illuminate\Routing\Route view(string $uri, string $view, array $data = [], int|array $status = 200, array $headers = [])

\Illuminate\Support\Facades\Schema

* @method static void blueprintResolver(\Closure $resolver)
* @method static void create(string $table, \Closure $callback)
* @method static bool createDatabase(string $name)
* @method static void defaultMorphKeyType(string $type)
* @method static void defaultStringLength(int $length)
* @method static bool disableForeignKeyConstraints()
* @method static void drop(string $table)
* @method static void dropAllTables()
* @method static void dropAllTypes()
* @method static void dropAllViews()
* @method static void dropColumns(string $table, string|array $columns)
* @method static bool dropDatabaseIfExists(string $name)
* @method static void dropIfExists(string $table)
* @method static bool enableForeignKeyConstraints()
* @method static void getAllTables()
* @method static array getAllViews()
* @method static array getColumnListing(string $table)
* @method static string getColumnType(string $table, string $column)
* @method static \Illuminate\Database\Connection getConnection()
* @method static bool hasColumn(string $table, string $column)
* @method static bool hasColumns(string $table, array $columns)
* @method static bool hasTable(string $table)
* @method static void morphUsingUuids()
* @method static void rename(string $from, string $to)
* @method static \Illuminate\Database\Schema\Builder setConnection(\Illuminate\Database\Connection $connection)
* @method static void table(string $table, \Closure $callback)
* @method static void whenTableDoesntHaveColumn(string $table, string $column, \Closure $callback)
* @method static void whenTableHasColumn(string $table, string $column, \Closure $callback)

\Illuminate\Support\Facades\Session

* @method static void ageFlashData()
* @method static array all()
* @method static string|null blockDriver()
* @method static int decrement(string $key, int $amount = 1)
* @method static mixed driver(string|null $driver = null)
* @method static bool exists(string|array $key)
* @method static \Illuminate\Session\SessionManager extend(string $driver, \Closure $callback)
* @method static void flash(string $key, mixed $value = true)
* @method static void flashInput(array $value)
* @method static void flush()
* @method static void forget(string|array $keys)
* @method static \Illuminate\Session\SessionManager forgetDrivers()
* @method static mixed get(string $key, mixed $default = null)
* @method static \Illuminate\Contracts\Container\Container getContainer()
* @method static string getDefaultDriver()
* @method static array getDrivers()
* @method static \SessionHandlerInterface getHandler()
* @method static string getId()
* @method static string getName()
* @method static mixed getOldInput(string|null $key = null, mixed $default = null)
* @method static array getSessionConfig()
* @method static bool handlerNeedsRequest()
* @method static bool has(string|array $key)
* @method static bool hasOldInput(string|null $key = null)
* @method static mixed increment(string $key, int $amount = 1)
* @method static bool invalidate()
* @method static bool isStarted()
* @method static bool isValidId(string $id)
* @method static void keep(array|mixed $keys = null)
* @method static bool migrate(bool $destroy = false)
* @method static bool missing(string|array $key)
* @method static void now(string $key, mixed $value)
* @method static array only(array $keys)
* @method static void passwordConfirmed()
* @method static string|null previousUrl()
* @method static mixed pull(string $key, mixed $default = null)
* @method static void push(string $key, mixed $value)
* @method static void put(string|array $key, mixed $value = null)
* @method static void reflash()
* @method static bool regenerate(bool $destroy = false)
* @method static void regenerateToken()
* @method static mixed remember(string $key, \Closure $callback)
* @method static mixed remove(string $key)
* @method static void replace(array $attributes)
* @method static void save()
* @method static \Illuminate\Session\SessionManager setContainer(\Illuminate\Contracts\Container\Container $container)
* @method static void setDefaultDriver(string $name)
* @method static void setExists(bool $value)
* @method static void setId(string $id)
* @method static void setName(string $name)
* @method static void setPreviousUrl(string $url)
* @method static void setRequestOnHandler(\Illuminate\Http\Request $request)
* @method static bool shouldBlock()
* @method static bool start()
* @method static string token()

\Illuminate\Support\Facades\Storage

* @method static \Illuminate\Contracts\Filesystem\Filesystem build(string|array $config)
* @method static \Illuminate\Contracts\Filesystem\Filesystem cloud()
* @method static \Illuminate\Contracts\Filesystem\Filesystem createFtpDriver(array $config)
* @method static \Illuminate\Contracts\Filesystem\Filesystem createLocalDriver(array $config)
* @method static \Illuminate\Contracts\Filesystem\Cloud createS3Driver(array $config)
* @method static \Illuminate\Contracts\Filesystem\Filesystem createSftpDriver(array $config)
* @method static \Illuminate\Contracts\Filesystem\Filesystem disk(string|null $name = null)
* @method static \Illuminate\Contracts\Filesystem\Filesystem drive(string|null $name = null)
* @method static \Illuminate\Filesystem\FilesystemManager extend(string $driver, \Closure $callback)
* @method static \Illuminate\Filesystem\FilesystemManager forgetDisk(array|string $disk)
* @method static string getDefaultCloudDriver()
* @method static string getDefaultDriver()
* @method static void purge(string|null $name = null)
* @method static \Illuminate\Filesystem\FilesystemManager set(string $name, mixed $disk)
* @method static \Illuminate\Filesystem\FilesystemManager setApplication(\Illuminate\Contracts\Foundation\Application $app)

\Illuminate\Support\Facades\URL

* @method static string action(string|array $action, mixed $parameters = [], bool $absolute = true)
* @method static string asset(string $path, bool|null $secure = null)
* @method static string assetFrom(string $root, string $path, bool|null $secure = null)
* @method static string current()
* @method static void defaults(array $defaults)
* @method static void flushMacros()
* @method static void forceRootUrl(string|null $root)
* @method static void forceScheme(string|null $scheme)
* @method static string format(string $root, string $path, \Illuminate\Routing\Route|null $route = null)
* @method static \Illuminate\Routing\UrlGenerator formatHostUsing(\Closure $callback)
* @method static array formatParameters(mixed|array $parameters)
* @method static \Illuminate\Routing\UrlGenerator formatPathUsing(\Closure $callback)
* @method static string formatRoot(string $scheme, string|null $root = null)
* @method static string formatScheme(bool|null $secure = null)
* @method static string full()
* @method static array getDefaultParameters()
* @method static \Illuminate\Http\Request getRequest()
* @method static string getRootControllerNamespace()
* @method static bool hasCorrectSignature(\Illuminate\Http\Request $request, bool $absolute = true, array $ignoreQuery = [])
* @method static bool hasMacro(string $name)
* @method static bool hasValidRelativeSignature(\Illuminate\Http\Request $request, array $ignoreQuery = [])
* @method static bool hasValidSignature(\Illuminate\Http\Request $request, bool $absolute = true, array $ignoreQuery = [])
* @method static bool isValidUrl(string $path)
* @method static void macro(string $name, object|callable $macro)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static \Closure pathFormatter()
* @method static string previous(mixed $fallback = false)
* @method static string previousPath(mixed $fallback = false)
* @method static string route(string $name, mixed $parameters = [], bool $absolute = true)
* @method static string secure(string $path, array $parameters = [])
* @method static string secureAsset(string $path)
* @method static \Illuminate\Routing\UrlGenerator setKeyResolver(callable $keyResolver)
* @method static void setRequest(\Illuminate\Http\Request $request)
* @method static \Illuminate\Routing\UrlGenerator setRootControllerNamespace(string $rootNamespace)
* @method static \Illuminate\Routing\UrlGenerator setRoutes(\Illuminate\Routing\RouteCollectionInterface $routes)
* @method static \Illuminate\Routing\UrlGenerator setSessionResolver(callable $sessionResolver)
* @method static bool signatureHasNotExpired(\Illuminate\Http\Request $request)
* @method static string signedRoute(string $name, mixed $parameters = [], \DateTimeInterface|\DateInterval|int|null $expiration = null, bool $absolute = true)
* @method static string temporarySignedRoute(string $name, \DateTimeInterface|\DateInterval|int $expiration, array $parameters = [], bool $absolute = true)
* @method static string to(string $path, mixed $extra = [], bool|null $secure = null)
* @method static string toRoute(\Illuminate\Routing\Route $route, mixed $parameters, bool $absolute)

\Illuminate\Support\Facades\Validator

* @method static void excludeUnvalidatedArrayKeys()
* @method static void extend(string $rule, \Closure|string $extension, string|null $message = null)
* @method static void extendDependent(string $rule, \Closure|string $extension, string|null $message = null)
* @method static void extendImplicit(string $rule, \Closure|string $extension, string|null $message = null)
* @method static \Illuminate\Contracts\Container\Container|null getContainer()
* @method static \Illuminate\Validation\PresenceVerifierInterface getPresenceVerifier()
* @method static \Illuminate\Contracts\Translation\Translator getTranslator()
* @method static void includeUnvalidatedArrayKeys()
* @method static \Illuminate\Validation\Validator make(array $data, array $rules, array $messages = [], array $customAttributes = [])
* @method static void replacer(string $rule, \Closure|string $replacer)
* @method static void resolver(\Closure $resolver)
* @method static \Illuminate\Validation\Factory setContainer(\Illuminate\Contracts\Container\Container $container)
* @method static void setPresenceVerifier(\Illuminate\Validation\PresenceVerifierInterface $presenceVerifier)
* @method static array validate(array $data, array $rules, array $messages = [], array $customAttributes = [])

\Illuminate\Support\Facades\View

* @method static void addExtension(string $extension, string $engine, \Closure|null $resolver = null)
* @method static void addLocation(string $location)
* @method static void addLoop(\Countable|array $data)
* @method static \Illuminate\View\Factory addNamespace(string $namespace, string|array $hints)
* @method static string appendSection()
* @method static void callComposer(\Illuminate\Contracts\View\View $view)
* @method static void callCreator(\Illuminate\Contracts\View\View $view)
* @method static array composer(array|string $views, \Closure|string $callback)
* @method static array composers(array $composers)
* @method static array creator(array|string $views, \Closure|string $callback)
* @method static void decrementRender()
* @method static bool doneRendering()
* @method static void endSlot()
* @method static bool exists(string $view)
* @method static \Illuminate\Contracts\View\View file(string $path, \Illuminate\Contracts\Support\Arrayable|array $data = [], array $mergeData = [])
* @method static \Illuminate\Contracts\View\View first(array $views, \Illuminate\Contracts\Support\Arrayable|array $data = [], array $mergeData = [])
* @method static void flushFinderCache()
* @method static void flushMacros()
* @method static void flushSections()
* @method static void flushStacks()
* @method static void flushState()
* @method static void flushStateIfDoneRendering()
* @method static mixed|null getConsumableComponentData(string $key, mixed $default = null)
* @method static \Illuminate\Contracts\Container\Container getContainer()
* @method static \Illuminate\Contracts\Events\Dispatcher getDispatcher()
* @method static \Illuminate\Contracts\View\Engine getEngineFromPath(string $path)
* @method static \Illuminate\View\Engines\EngineResolver getEngineResolver()
* @method static array getExtensions()
* @method static \Illuminate\View\ViewFinderInterface getFinder()
* @method static \stdClass|null getLastLoop()
* @method static array getLoopStack()
* @method static mixed getSection(string $name, string|null $default = null)
* @method static array getSections()
* @method static array getShared()
* @method static bool hasMacro(string $name)
* @method static bool hasRenderedOnce(string $id)
* @method static bool hasSection(string $name)
* @method static void incrementLoopIndices()
* @method static void incrementRender()
* @method static void inject(string $section, string $content)
* @method static void macro(string $name, object|callable $macro)
* @method static \Illuminate\Contracts\View\View make(string $view, \Illuminate\Contracts\Support\Arrayable|array $data = [], array $mergeData = [])
* @method static void markAsRenderedOnce(string $id)
* @method static void mixin(object $mixin, bool $replace = true)
* @method static string parentPlaceholder(string $section = '')
* @method static void popLoop()
* @method static \Illuminate\View\Factory prependNamespace(string $namespace, string|array $hints)
* @method static string renderComponent()
* @method static string renderEach(string $view, array $data, string $iterator, string $empty = raw|)
* @method static string renderTranslation()
* @method static string renderUnless(bool $condition, string $view, \Illuminate\Contracts\Support\Arrayable|array $data = [], array $mergeData = [])
* @method static string renderWhen(bool $condition, string $view, \Illuminate\Contracts\Support\Arrayable|array $data = [], array $mergeData = [])
* @method static \Illuminate\View\Factory replaceNamespace(string $namespace, string|array $hints)
* @method static bool sectionMissing(string $name)
* @method static void setContainer(\Illuminate\Contracts\Container\Container $container)
* @method static void setDispatcher(\Illuminate\Contracts\Events\Dispatcher $events)
* @method static void setFinder(\Illuminate\View\ViewFinderInterface $finder)
* @method static mixed share(array|string $key, mixed|null $value = null)
* @method static mixed shared(string $key, mixed $default = null)
* @method static void slot(string $name, string|null $content = null, array $attributes = [])
* @method static void startComponent(\Illuminate\Contracts\View\View|\Illuminate\Contracts\Support\Htmlable|\Closure|string $view, array $data = [])
* @method static void startComponentFirst(array $names, array $data = [])
* @method static void startPrepend(string $section, string $content = '')
* @method static void startPush(string $section, string $content = '')
* @method static void startSection(string $section, string|null $content = null)
* @method static void startTranslation(array $replacements = [])
* @method static string stopPrepend()
* @method static string stopPush()
* @method static string stopSection(bool $overwrite = false)
* @method static string yieldContent(string $section, string $default = '')
* @method static string yieldPushContent(string $section, string $default = '')
* @method static string yieldSection()

